---
const navItems = [
  { href: '/', label: 'Index' },
  { href: '/about', label: 'About' },
  { href: '/blog', label: 'Blog' },
  { href: '/work', label: 'Work' },
  { href: '/now', label: 'Now' },
];

const currentPath = Astro.url.pathname;
---

<header class="flex items-center justify-between w-full">
  <!-- Left space for balance -->
  <div class="hidden sm:block"></div>

  <!-- Center nav -->
  <nav class="flex items-center gap-2 mx-1 text-sm font-medium flex-1 justify-center">
    {navItems.map((item) => {
      const isActive = currentPath === item.href ||
        (item.href !== '/' && currentPath.startsWith(item.href));

      return (
        <a
          href={item.href}
          class={`px-3 py-1.5 rounded-md transition-all duration-150 ${
            isActive
              ? 'bg-[var(--bg-primary)] text-[var(--text-primary)] shadow-sm'
              : 'text-[var(--text-secondary)] hover:bg-[var(--bg-primary)]/50 hover:text-[var(--text-primary)]'
          }`}
        >
          {item.label}
        </a>
      );
    })}
  </nav>
  <!-- Right toggles -->
  <div id="theme-toggle"></div>
</header>

<script>
  // Theme toggle functionality
  function createThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    if (!themeToggle) return;

    // The initial theme is set by the script in Layout.astro.
    // This script simply reads the current theme and handles the toggle.
    let currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';

    // Create toggle button
    const button = document.createElement('button');
    button.className = 'h-8 w-8 inline-flex items-center justify-center rounded-md border border-[var(--border-color)] hover:bg-[var(--bg-secondary)] transition-colors';
    button.setAttribute('aria-label', 'Toggle theme');

    function updateButton() {
      button.innerHTML = currentTheme === 'dark'
        ? '<svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z"/></svg>'
        : '<svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24"><path d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 01.818.162z"/></svg>';
    }

    updateButton();

    button.addEventListener('click', () => {
      currentTheme = currentTheme === 'dark' ? 'light' : 'dark';
      localStorage.setItem('theme', currentTheme);
      document.documentElement.setAttribute('data-theme', currentTheme);
      document.documentElement.classList.toggle('dark', currentTheme === 'dark');
      updateButton();
    });

    themeToggle.appendChild(button);
  }

  // Initialize theme toggle
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', createThemeToggle);
  } else {
    createThemeToggle();
  }

  // Re-initialize on navigation (for Astro's client-side routing)
  document.addEventListener('astro:page-load', () => {
    // Small delay to ensure DOM is ready
    setTimeout(createThemeToggle, 10);
  });
</script>
